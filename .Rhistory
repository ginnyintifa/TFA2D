library(devtools)
library(roxygen2)
setwd("/Users/ginny/My Drive/KSA2D_v2/KSA2Dv2/")
document()
setwd("/Users/ginny/My Drive/TFA2D/TFA2D/")
document()
library("devtools")
devtools::install_github("ginnyintifa/TFA2D")
library(TFA2D)
tf_list_sub = tf_map(protData_filename = "/Users/ginny/My Drive/nesviLab_scripts/test_output/ncc_ratio_gene_MD_tidy_mapFiile.tsv",
rnaData_filename = "/Users/ginny/My Drive/nonCCRCC20211020/rna_ccRCC_nCCRCC/tpm_filter_log2_zeroTosmallnumber.tsv",
tfNetwork_filename = "/Users/ginny/My Drive/nonCCRCC20211020/cc_KSA2D_TF_2/trrust_rawdata.human.tsv",
tf_outputName = "/Users/ginny/My Drive/TFA2D/test_output_package/TFA2D_tf_map.tsv")
annot = fread("/Users/ginny/My Drive/nonCCRCC20211020/clinical/col_annot_meta_20220526_wgii.tsv",
stringsAsFactors = F, data.table = F)
col_cc_wgii_high = annot$caseID[which(annot$tumorClass == "wgii_high_ccRCC")]
col_cc_wgii_low = annot$caseID[which(annot$tumorClass == "wgii_low_ccRCC")]
balance_sample_purity_bandwidth_tf(d1_data = tf_list_sub[[1]],
d2_data = tf_list_sub[[2]],
s1_col_name = col_cc_wgii_high,
s2_col_name = col_cc_wgii_low,
balance_flag = F,
nna_cutoff = 6,
working_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/",
compare_name = "cc_wgii_tf_b2",
permute_time =200,
bandwidth_factor = 2,
adjust_purity_flag = T,
annot_file = "/Users/ginny/My Drive/nonCCRCC20211020/clinical/col_annot_meta_20220526.tsv")
tfa2d_result_cytoscape(working_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/",
output_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/test1/",
freq_cutoff = NULL,
fdr_cutoff = 0.05,
tf_abs_fc_cutoff = 0.2,
substrate_abs_fc_cutoff = 0.5,
tfNetwork_filename = "/Users/ginny/My Drive/nonCCRCC20211020/cc_KSA2D_TF_2/trrust_rawdata.human.tsv"
)
tfa2d_result_cytoscape(working_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/",
output_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/test1/",
freq_cutoff = NULL,
fdr_cutoff = 0.05,
tf_abs_fc_cutoff = 0.2,
substrate_abs_fc_cutoff = 0.5,
tfNetwork_filename = "/Users/ginny/My Drive/nonCCRCC20211020/cc_KSA2D_TF_2/trrust_rawdata.human.tsv"
)
working_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/"
output_dir = "/Users/ginny/My Drive/TFA2D/test_output_package/cc_2H/test1/"
freq_cutoff = NULL
fdr_cutoff = 0.05
tf_abs_fc_cutoff = 0.2
substrate_abs_fc_cutoff = 0.5
tfNetwork_filename = "/Users/ginny/My Drive/nonCCRCC20211020/cc_KSA2D_TF_2/trrust_rawdata.human.tsv"
all_files = list.files(working_dir)
all_results_files = grep("\\.tsv", all_files, value = T)
all_results_files = grep("slice", all_results_files, value = T)
all_results_files
all_files = list.files(working_dir)
all_results_files = grep("\\.tsv", all_files, value = T)
all_results_files
rl = list()
names = c()
k = length(all_results_files)
for(i in 1: k)
{
file_name = all_results_files[i]
file_dir = paste0(working_dir, file_name)
s = fread(file_dir,stringsAsFactors = F, data.table = F)
names = c(names, s$name)
rl[[i]] = s
}
if(is.null(freq_cutoff))
{
freq_cutoff_use = ceiling(k/2)
}else{
freq_cutoff_use = freq_cutoff
}
name_freq = as.data.frame(table(names))%>%
dplyr::arrange(desc(Freq))%>%
dplyr::filter(Freq >= freq_cutoff_use)
merge_r = rbindlist(lapply(1:length(rl), function(x) {
it = rl[[x]]
return(it)
}))
filter_merge_r = merge_r%>%
dplyr::filter(name %in% name_freq$names)%>%
dplyr::group_by(name)%>%
dplyr::summarise_if(is.numeric, mean, na.rm = T)%>%
dplyr::ungroup()%>%
as.data.frame()
dir.create(output_dir)
write.table(filter_merge_r, paste0(output_dir,"merge_all.tsv"),
quote = F, row.names = F, sep = "\t")
merge_sig = filter_merge_r%>%
dplyr::filter(fdr<fdr_cutoff, abs(fc_tf)>tf_abs_fc_cutoff, abs(fc_substrate)>substrate_abs_fc_cutoff)
write.table(merge_sig, paste0(output_dir,"merge_sig.tsv"),
quote = F, row.names = F, sep = "\t")
omni = fread(tfNetwork_filename,
stringsAsFactors = F, data.table = F)
sig_t = gsub("_.*","", merge_sig$name)
sig_s =unlist(lapply(1:nrow(merge_sig), function(x){
t = merge_sig$name[x]
st = unlist(strsplit(t, split = "_"))
s = st[2]
return(s)
}))
sig_df = merge_sig%>%
dplyr::mutate(tf = sig_t, substrate =sig_s)%>%
dplyr::select(tf, substrate, everything())
all_nodes = unique(c(sig_t, sig_s))
##### build a network with these nodes
all_nodes_network = omni%>%
dplyr::filter(tf  %in% all_nodes, mem %in% all_nodes)%>%
dplyr::select(tf,mem)%>%
unique()
edge = rbindlist(lapply(1:nrow(all_nodes_network), function(x) {
t = all_nodes_network$tf[x]
s = all_nodes_network$mem[x]
edge_fdr = 1
edge_found = F
edge_num = 0
edge_both_positive = 0
edge_both_negative = 0
edge_kp_sn = 0
edge_kn_sp = 0
edge_dir = "none"
sig_sub = sig_df%>%
dplyr::filter(tf == t, substrate == s)
if(nrow(sig_sub)>0)
{
edge_fdr = min(sig_sub$fdr)
edge_found = T
edge_num = nrow(sig_sub)
signs = sig_sub$fc_tf*sig_sub$fc_substrate
if(sig_sub$fc_tf[1]>0)
{
tt = which(signs>0)
edge_both_positive = length(tt)
ff = which(signs<0)
edge_tp_sn = length(ff)
if(edge_both_positive>0)
{
edge_dir = "bothP"
}else{
edge_dir = "tPsN"
}
}
if(sig_sub$fc_tf[1]<0)
{
tt = which(signs>0)
edge_both_negative = length(tt)
ff = which(signs<0)
edge_tn_sp = length(ff)
if(edge_both_negative>0)
{
edge_dir = "bothN"
}else{
edge_dir = "tNsP"
}
}
}
edge_sig = -log10(edge_fdr)
edge_sig_bl = T
if(edge_fdr>fdr_cutoff)
edge_sig_bl = F
df = data.frame(tf = t, substrate = s, edge_found,
edge_num, edge_both_positive, edge_both_negative, edge_kn_sp, edge_kp_sn, edge_dir,
edge_fdr, edge_sig, edge_sig_bl, stringsAsFactors = F)
return(df)
}))
write.table(edge, paste0(output_dir, "edge.tsv"),
quote = F, row.names = F, sep = "\t")
sig_edge = edge%>%
dplyr::filter(edge_sig_bl == T)
node = rbindlist(lapply(1:length(all_nodes), function(x) {
n = all_nodes[x]
tf_bl= F
tf_fc =0
substrate_fc =0
nsig_edge = 0
sub_t = sig_df%>%
dplyr::filter(tf == n)
if(nrow(sub_t)>0)
{
tf_bl  = T
tf_fc = sub_t$fc_tf[1]
}
sub_s = sig_df%>%
dplyr::filter(substrate == n)
if(nrow(sub_s)>0)
{
substrate_fc = mean(sub_s$fc_substrate, na.rm = T)
}
sig_edge1 = sig_edge%>%
dplyr::mutate(name = paste(tf, substrate, sep = "_"))
nsig_edge = length(grep(n, sig_edge1$name))
df = data.frame(node = n, tf_bl, tf_fc, nsig_edge,substrate_fc, stringsAsFactors = F)
return(df)
# nsig_edge: number of significant edges this node involves in
}))
write.table(node, paste0(output_dir, "node.tsv"),
quote = F, row.names = F, sep = "\t")
